// File generated by FlutterFire CLI.
// ignore_for_file: lines_longer_than_80_chars, avoid_classes_with_only_static_members
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options_dev.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  /// The configurations for android devices.
  static const FirebaseOptions android = FirebaseOptions(
    apiKey: 'AIzaSyA-NbxDJPO-m30SAzx8PvFDEI_wyzFsLhc',
    appId: '1:261873756618:android:d1d6ca1b419ccf87d54733',
    messagingSenderId: '261873756618',
    projectId: 'pharmafacile-c2820',
    databaseURL: 'https://pharmafacile-c2820.firebaseio.com',
    storageBucket: 'pharmafacile-c2820.appspot.com',
  );

  /// The configurations for ios devices.
  static const FirebaseOptions ios = FirebaseOptions(
    apiKey: 'AIzaSyBI27H-QKkfBXa-Y7EyhGBFQ0R1SpS-VBs',
    appId: '1:261873756618:ios:009397790ae58e08d54733',
    messagingSenderId: '261873756618',
    projectId: 'pharmafacile-c2820',
    databaseURL: 'https://pharmafacile-c2820.firebaseio.com',
    storageBucket: 'pharmafacile-c2820.appspot.com',
    iosBundleId: 'com.pharmafacile.dev',
  );

  /// The configurations for web Apps.
  static const FirebaseOptions web = FirebaseOptions(
    apiKey: "AIzaSyCbs4a2n0S644jvGq9EfwOx0dSSbgM2QJY",
    authDomain: "pharmafacile-c2820.firebaseapp.com",
    projectId: "pharmafacile-c2820",
    storageBucket: "pharmafacile-c2820.firebasestorage.app",
    messagingSenderId: "261873756618",
    appId: "1:261873756618:web:9e2a52dfa12d4507d54733",
    measurementId: "G-R36LFC8EQ6",
  );

  /// The current platform.
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for macos - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.windows:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for windows - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }
}
